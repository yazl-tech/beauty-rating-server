// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package base

import (
	"context"

	"github.com/yazl-tech/beauty-rating-server/pkg/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAnalysis(db *gorm.DB, opts ...gen.DOOption) analysis {
	_analysis := analysis{}

	_analysis.analysisDo.UseDB(db, opts...)
	_analysis.analysisDo.UseModel(&model.Analysis{})

	tableName := _analysis.analysisDo.TableName()
	_analysis.ALL = field.NewAsterisk(tableName)
	_analysis.ID = field.NewInt(tableName, "id")
	_analysis.UserId = field.NewInt(tableName, "user_id")
	_analysis.ImageUrl = field.NewString(tableName, "image_url")
	_analysis.Score = field.NewInt(tableName, "score")
	_analysis.Description = field.NewString(tableName, "description")
	_analysis.Tags = field.NewField(tableName, "tags")
	_analysis.ScoreDetails = field.NewField(tableName, "score_details")
	_analysis.IsFavorite = field.NewBool(tableName, "is_favorite")
	_analysis.CreatedAt = field.NewTime(tableName, "created_at")
	_analysis.UpdatedAt = field.NewTime(tableName, "updated_at")
	_analysis.DeletedAt = field.NewField(tableName, "deleted_at")

	_analysis.fillFieldMap()

	return _analysis
}

type analysis struct {
	analysisDo analysisDo

	ALL          field.Asterisk
	ID           field.Int
	UserId       field.Int
	ImageUrl     field.String
	Score        field.Int
	Description  field.String
	Tags         field.Field
	ScoreDetails field.Field
	IsFavorite   field.Bool
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (a analysis) Table(newTableName string) *analysis {
	a.analysisDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a analysis) As(alias string) *analysis {
	a.analysisDo.DO = *(a.analysisDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *analysis) updateTableName(table string) *analysis {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt(table, "id")
	a.UserId = field.NewInt(table, "user_id")
	a.ImageUrl = field.NewString(table, "image_url")
	a.Score = field.NewInt(table, "score")
	a.Description = field.NewString(table, "description")
	a.Tags = field.NewField(table, "tags")
	a.ScoreDetails = field.NewField(table, "score_details")
	a.IsFavorite = field.NewBool(table, "is_favorite")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *analysis) WithContext(ctx context.Context) IAnalysisDo { return a.analysisDo.WithContext(ctx) }

func (a analysis) TableName() string { return a.analysisDo.TableName() }

func (a analysis) Alias() string { return a.analysisDo.Alias() }

func (a analysis) Columns(cols ...field.Expr) gen.Columns { return a.analysisDo.Columns(cols...) }

func (a *analysis) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *analysis) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserId
	a.fieldMap["image_url"] = a.ImageUrl
	a.fieldMap["score"] = a.Score
	a.fieldMap["description"] = a.Description
	a.fieldMap["tags"] = a.Tags
	a.fieldMap["score_details"] = a.ScoreDetails
	a.fieldMap["is_favorite"] = a.IsFavorite
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a analysis) clone(db *gorm.DB) analysis {
	a.analysisDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a analysis) replaceDB(db *gorm.DB) analysis {
	a.analysisDo.ReplaceDB(db)
	return a
}

type analysisDo struct{ gen.DO }

type IAnalysisDo interface {
	gen.SubQuery
	Debug() IAnalysisDo
	WithContext(ctx context.Context) IAnalysisDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnalysisDo
	WriteDB() IAnalysisDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnalysisDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnalysisDo
	Not(conds ...gen.Condition) IAnalysisDo
	Or(conds ...gen.Condition) IAnalysisDo
	Select(conds ...field.Expr) IAnalysisDo
	Where(conds ...gen.Condition) IAnalysisDo
	Order(conds ...field.Expr) IAnalysisDo
	Distinct(cols ...field.Expr) IAnalysisDo
	Omit(cols ...field.Expr) IAnalysisDo
	Join(table schema.Tabler, on ...field.Expr) IAnalysisDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnalysisDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnalysisDo
	Group(cols ...field.Expr) IAnalysisDo
	Having(conds ...gen.Condition) IAnalysisDo
	Limit(limit int) IAnalysisDo
	Offset(offset int) IAnalysisDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalysisDo
	Unscoped() IAnalysisDo
	Create(values ...*model.Analysis) error
	CreateInBatches(values []*model.Analysis, batchSize int) error
	Save(values ...*model.Analysis) error
	First() (*model.Analysis, error)
	Take() (*model.Analysis, error)
	Last() (*model.Analysis, error)
	Find() ([]*model.Analysis, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Analysis, err error)
	FindInBatches(result *[]*model.Analysis, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Analysis) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnalysisDo
	Assign(attrs ...field.AssignExpr) IAnalysisDo
	Joins(fields ...field.RelationField) IAnalysisDo
	Preload(fields ...field.RelationField) IAnalysisDo
	FirstOrInit() (*model.Analysis, error)
	FirstOrCreate() (*model.Analysis, error)
	FindByPage(offset int, limit int) (result []*model.Analysis, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnalysisDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a analysisDo) Debug() IAnalysisDo {
	return a.withDO(a.DO.Debug())
}

func (a analysisDo) WithContext(ctx context.Context) IAnalysisDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a analysisDo) ReadDB() IAnalysisDo {
	return a.Clauses(dbresolver.Read)
}

func (a analysisDo) WriteDB() IAnalysisDo {
	return a.Clauses(dbresolver.Write)
}

func (a analysisDo) Session(config *gorm.Session) IAnalysisDo {
	return a.withDO(a.DO.Session(config))
}

func (a analysisDo) Clauses(conds ...clause.Expression) IAnalysisDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a analysisDo) Returning(value interface{}, columns ...string) IAnalysisDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a analysisDo) Not(conds ...gen.Condition) IAnalysisDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a analysisDo) Or(conds ...gen.Condition) IAnalysisDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a analysisDo) Select(conds ...field.Expr) IAnalysisDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a analysisDo) Where(conds ...gen.Condition) IAnalysisDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a analysisDo) Order(conds ...field.Expr) IAnalysisDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a analysisDo) Distinct(cols ...field.Expr) IAnalysisDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a analysisDo) Omit(cols ...field.Expr) IAnalysisDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a analysisDo) Join(table schema.Tabler, on ...field.Expr) IAnalysisDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a analysisDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnalysisDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a analysisDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnalysisDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a analysisDo) Group(cols ...field.Expr) IAnalysisDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a analysisDo) Having(conds ...gen.Condition) IAnalysisDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a analysisDo) Limit(limit int) IAnalysisDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a analysisDo) Offset(offset int) IAnalysisDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a analysisDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalysisDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a analysisDo) Unscoped() IAnalysisDo {
	return a.withDO(a.DO.Unscoped())
}

func (a analysisDo) Create(values ...*model.Analysis) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a analysisDo) CreateInBatches(values []*model.Analysis, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a analysisDo) Save(values ...*model.Analysis) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a analysisDo) First() (*model.Analysis, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Analysis), nil
	}
}

func (a analysisDo) Take() (*model.Analysis, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Analysis), nil
	}
}

func (a analysisDo) Last() (*model.Analysis, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Analysis), nil
	}
}

func (a analysisDo) Find() ([]*model.Analysis, error) {
	result, err := a.DO.Find()
	return result.([]*model.Analysis), err
}

func (a analysisDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Analysis, err error) {
	buf := make([]*model.Analysis, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a analysisDo) FindInBatches(result *[]*model.Analysis, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a analysisDo) Attrs(attrs ...field.AssignExpr) IAnalysisDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a analysisDo) Assign(attrs ...field.AssignExpr) IAnalysisDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a analysisDo) Joins(fields ...field.RelationField) IAnalysisDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a analysisDo) Preload(fields ...field.RelationField) IAnalysisDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a analysisDo) FirstOrInit() (*model.Analysis, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Analysis), nil
	}
}

func (a analysisDo) FirstOrCreate() (*model.Analysis, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Analysis), nil
	}
}

func (a analysisDo) FindByPage(offset int, limit int) (result []*model.Analysis, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a analysisDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a analysisDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a analysisDo) Delete(models ...*model.Analysis) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *analysisDo) withDO(do gen.Dao) *analysisDo {
	a.DO = *do.(*gen.DO)
	return a
}
